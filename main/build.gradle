
group = 'com.mobile.app.main'
version = getEnvValue("versionName", "1.0.1");
def apVersion = getEnvValue("apVersion", "");
apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'
atlas {
    atlasEnabled true
    tBuildConfig {
        preLaunch = 'com.enation.app.main.launch.AppLaunch'
        classInject false
    }
    manifestOptions {
        addAtlasProxyComponents true
    }

    patchConfigs {
        debug {
            createTPatch true
        }
    }
    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "com.mobile.app.main:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.mobile.app"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 2
        versionName version
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ndk {
                abiFilters "x86","armeabi"
            }
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile('com.taobao.android:atlas_core:5.0.7.26-rc2@aar') {

        transitive = true

    }
    compile 'com.taobao.android:atlasupdate:1.1.4.10@aar'
    compile 'com.android.support:design:25.0.0'
    compile 'com.airbnb.android:lottie:1.5.3'
    bundleCompile project(':firstbundle')
    bundleCompile  project(':basebundle')
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:support-v4:25.0.0'
    compile 'com.taobao.android:atlas_core:5.0.6-rc92@aar'
    //================================================
    testCompile 'junit:junit:4.12'
    compile project(':javashoplib')
    compile project(':PushSDK')
}

String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}
tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'


task sourcesJar(type: Jar) {
    from('src/main/java') {
        include '**'
    }
    classifier = 'sources'
}

publishing {
    // 指定仓库位置
    repositories {
        maven{
            url = '/Users/Android/MAC_SDK/extras/m2repository'
        }
    }
    publications {
        // 默认本地仓库地址  用户目录/.m2/repository/
        maven(MavenPublication) {
            //读取ap目录上传maven
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            //生成本地maven目录
            artifactId "AP-debug"
        }
    }
}
